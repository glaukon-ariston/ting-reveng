%!PS-Adobe-3.0
%%Title: tingOid.ps
%%BoundingBox: 0 0 597 842
%%Creator: Glaukon Ariston
%%Copyright: Glaukon Ariston. All Rights Reserved
%%Date: 16/12/2016
%%LanguageLevel: 3
%%EndComments

%%BeginProlog

% https://github.com/entropia/tip-toi-reveng/blob/master/docs/The_Code.pdf
% https://github.com/entropia/tip-toi-reveng/blob/master/src/OidCode.hs
% https://github.com/Martin-Dames/Tingeltangel/blob/master/src/main/java/tingeltangel/core/Codes.java


/tingOid <<>> def
tingOid begin



/DEBUG false def
/outlineRect { % x y w h lineWidth
	DEBUG {
		% draw an outline
		gsave 
			0.8 setgray	% debugGray
			setlinewidth
			rectstroke
		grestore
	} {
		pop pop pop pop pop
	} ifelse
} def


/dotOffsetMap [
	[ 1 -1] % value 0
	[-1 -1] % value 1
	[-1  1] % value 2
	[ 1  1] % value 3
	[ 0  0] % Raster Point (4)
	[ 1  0] % Raster Orientation (5)
] def

/RP 4 def	% Raster Point Offset
/RO 5 def	% Raster Orientation Offset

% Value
/VP {<<>>begin % n i -> value
	[/n /i ]#=
	% (n >> 2*i) & 0x03
	n i -2 mul bitshift
		3 and
end} def

% Parity
/VPP {<<>>begin % _ -> [xd yd]
	% c1 = ((w1 ^ w4 ^ w6 ^ w7) & 0x01) << 1
	VP1 [VP4 VP6 VP7] {xor} forall 1 and 1 bitshift
	% c2 = (w0 ^ w2 ^ w3 ^ w5) & 0x01
	VP0 [VP2 VP3 VP5] {xor} forall 1 and
	% (c1 | c2)
	or
end} def


/defVPs {<<>>begin % oid -> [int*16]
	[/oid ]#==
	0 1 7 {
		dup 32 string cvs [ exch (VP) ] sconcat % VPi
		cvn % /VPi
		exch % /VPi i
		oid exch % /VPi oid i
		VP def
	} for
end} def


/getOidPattern {<<>>begin % oid -> [int*16]
	[/oid ]#=
		
	/VP0 oid 0 VP def
	/VP1 oid 1 VP def
	/VP2 oid 2 VP def
	/VP3 oid 3 VP def
	/VP4 oid 4 VP def
	/VP6 oid 6 VP def
	/VP5 oid 5 VP def
	/VP7 oid 7 VP def

	[VPP VP7 VP6 VP5 VP4 VP3 VP2 VP1 VP0] [/values ] #=

	[	[RP RP  RP  RP]
		[RP VPP VP7 VP6]
		[RO VP5 VP4 VP3]
		[RP VP2 VP1 VP0]
	]
end} def


/getPatternOffsets {<<>>begin % [int*16] -> [[xd yd]*16]
	[	exch
		{	[ exch
			{
				dotOffsetMap exch get
			} forall
			]
		} forall
	]
end} def


/roundDot {<<>>begin % x y size -> _
	% inherits: px
	[/x /y /size ] #=
	newpath
		[ x y size 2 div] {px} forall
			0 360 arc
	fill
end} def


/squareDot {<<>>begin % x y size -> _
	% inherits: px
	[/x /y /size ] #=
	[ [x y] {size 2 div sub} forall
		size size] {px} forall
	rectfill
end} def


/drawOidPattern {<<>>begin % x y oidPattern -> _
	% inherits: dpi dotSize drawDot px pxPerPoint patternWidth patternHeight dotOffset dotOffset'
	[/x /y /oidPattern ] #=
	gsave 
		0 setgray
		/iy 3 def
		oidPattern {
			% [4*[xd yd]]
			/ix 0 def
			{	dup aload pop
				[/xd /yd ] #=
				[[ix iy] {pxPerPoint mul centreOffset add} forall] 
				% [cx cy] % centre
				{ 	% _d c_
					exch 
						xd 0 eq not yd 0 eq and {
							dotOffset'
						} {
							dotOffset 
						} ifelse 
					mul 
					add 
				} a2forall
				% x' y'
				[ 3 1 roll ] [x y] {add} a2forall
				dotSize drawDot
			
				/ix ix 1 add def
			} forall
			/iy iy 1 sub def
		} forall
	grestore
	% debug
	[x y patternWidth patternHeight 1] {px} forall outlineRect
end} def


/drawOidImage {<<>>begin % oid x y imageWidth imageHeight -> _
	[/oid /x /y /imageWidth /imageHeight ] #=
	oid getOidPattern getPatternOffsets [/oidPattern ]#=
	gsave
		x y translate
		0 0 imageWidth pt2px imageHeight pt2px patternWidth patternHeight 
			{ pop pop oidPattern drawOidPattern } tile
		% debug
		0 0 imageWidth imageHeight 1 px outlineRect
	grestore
end} def


% convert from tingId to oid
/tingId2Oid {% tingId -> oid
	mapBaseTingid sub
	mapTingidOid exch get cvi
	dup -1 eq {
		cvs [ exch
			(ERROR: Unknown TingId )
			exch
		] sconcat print
		stop
	} if
} def


/printLabel {<<>>begin % label v -> _
	[/label /v ]#=
	[ label (: ) v toStr ( mm\n)] sconcat print
end} def


% dpi: 1200
% dotSize: 1
% pxPerPoint: 12
% pxPerPoint: 0.254 mm
% centreOffset: 6
% patternWidth: 48
% patternWidth: 1.016 mm
% patternHeight: 48
% patternHeight: 1.016 mm
% dotOffset: 2
% dotOffset': 3
% startTingId: 15000
% oidPatch: [28.3464565 28.3464565]
% labelHeight: 11.338583
% workArea: [538.582642 785.196899]
/defineConstants { % dpi dotSize drawDot -> _
	cvx dup toStr
	[/dpi /dotSize /drawDot /drawDot'] #==
	{1 dpi div inch mul} [/px ]#=
	{px pt2mm} [/px2mm ]#=
	{72 div dpi mul} [/pt2px ]#=
	dpi 100 divUp [/pxPerPoint ]#==
	(pxPerPoint) pxPerPoint px2mm printLabel
	pxPerPoint 2 divUp [/centreOffset ]#==
	4 pxPerPoint mul [/patternWidth ]#==
	(patternWidth) patternWidth px2mm printLabel
	4 pxPerPoint mul [/patternHeight ]#==
	(patternHeight) patternHeight px2mm printLabel
	dpi 600 divUp [/dotOffset ]#== % how many pixels to shift dots horizontally or vertically
	dpi 400 divUp [/dotOffset']#== % how many pixels to shift raster orientation dot horizontally or vertically
	% (labelHeight) labelHeight pt2mm printLabel
	% (oidPatch) [oidPatch {pt2mm} forall] printLabel
} def


/Middef


/midGen { % start -> proc
	% the following procedure follows the following protocol:
	% 	- it leaves two values on the stack: iterator and value
	%	- the iterator is plugged back in the procedure by the seqNext procedure in place of the DUMMY element
	%   - the value is what gets returned by the seqNext procedure 
	{ DUMMY % _ -> value advance
		dup
		Mid exch get
		exch 1 add
	} dup 0 % start proc proc 0 
	4 -1 roll put
} def


/seqGen { % start op -> proc
	% the following procedure follows the following protocol:
	% 	- it leaves two values on the stack: value and iterator 
	%	- the iterator is plugged back in the procedure by the seqNext procedure in place of the DUMMY element
	%   - the value is what gets returned by the seqNext procedure 
	{ DUMMY % _ -> value advance 
		dup
		DUMMY exec
	} dup 0 		% start op proc proc 0 
	5 -1 roll put 	% op proc
	dup 2 			% op proc proc 2
	4 -1 roll put
} def


/seqNext { % /proc -> value
	% the proc must be of the { DUMMY ... } form
	dup load exec % /proc value iterator 
	3 -1 roll
	load 0 % value iterator {DUMMY ...} 0
	3 -1 roll put
} bind def


/testTingOidGeneration {<<>>begin % _ -> _
	15065 tingId2Oid getOidPattern [/oidPattern ]#==
	oidPattern
		 [[4 4 4 4] [4 2 0 2] [5 2 2 3] [4 0 3 3]]
		eqValue assert
	oidPattern getPatternOffsets
		[
			[[0 0] [0 0] [0 0] [0 0]] 
			[[0 0] [-1 1] [1 -1] [-1 1]] 
			[[1 0] [-1 1] [-1 1] [1 1]] 
			[[0 0] [1 -1] [1 1] [1 1]]
		]
		eqValue assert

	15066 tingId2Oid getOidPattern [/oidPattern ]#==
	oidPattern
		[[4 4 4 4] [4 0 0 2] [5 2 2 3] [4 1 0 0]]
		eqValue assert
	oidPattern getPatternOffsets
		[
			[[0 0] [0 0] [0 0] [0 0]] 
			[[0 0] [1 -1] [1 -1] [-1 1]] 
			[[1 0] [-1 1] [-1 1] [1 1]] 
			[[0 0] [-1 -1] [1 -1] [1 -1]] 
		]
		eqValue assert
end} def


/drawVars {<<>>begin % x y [vars] -> _
	[/x /y /vars ] #=
	gsave
		x y moveto
		[	vars 
			{
				dup toStr
				exch cvx exec toStr
				( ) exch
				( )
			} forall
		] sconcat show
	grestore
end} def


/drawTitle {<<>>begin % x y -> _
	[/x /y ] #=
	x y [/dpi /dotSize /drawDot' /pxPerPoint /pxPerPoint /centreOffset /patternWidth /patternHeight /dotOffset /dotOffset' /tingId ] drawVars
end} def


% Input: Margins PageSize oidPatch
/drawContactSheet {<<>>begin % {nextTingId} {labelProc} -> _
	[/nextTingId /labelProc]#=
	
	Margins aload pop [/left /top /right /bottom ]#=
	PageSize aload pop [/paperWidth /paperHeight ]#=
	[PageSize [left right add top bottom add] {sub} a2forall] [/workArea ]#==
	[workArea {pt2mm} forall] [/workAreaMM]#==
	
	/tingId [] def
	left bottom 
		workArea aload pop 
		% oidPatch aload pop labelHeight add
		oidPatch aload pop
		{	[/x /y /width /height ] #=
			/tingId /nextTingId seqNext gdef
			tingId tingId2Oid [/oid ]#=
			oid
			% x y labelHeight add
			x y
			oidPatch aload pop
				drawOidImage
			
			% label the pattern
			x y width height tingId oid labelProc
		} tile
	left paperHeight top sub drawTitle
	/nextTingId load
end} def


/drawOidCenteredOnPage {<<>>begin % tingId -> _
	[/tingId ]#==
	
	Margins aload pop [/left /top /right /bottom ]#=
	PageSize aload pop [/paperWidth /paperHeight ]#=
	[PageSize [left right add top bottom add] {sub} a2forall] [/workArea ]#==
	[workArea {pt2mm} forall] [/workAreaMM]#==

	tingId tingId2Oid [/oid ]#==
	oid
	% x y labelHeight add
	workArea oidPatch {sub 2 div} a2forall % x y
	oidPatch aload pop
		drawOidImage
end} def
	

end	% tingOid

%%EndProlog

%%BeginSetup
%%EndSetup

%%BeginScript
%%EndScript

%%Trailer
%%EOF
