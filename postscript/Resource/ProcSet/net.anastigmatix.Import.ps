/net.anastigmatix.Import/ProcSet resourcestatus{ pop % 146
 2 % 136
 lt % 146
{ currentfile % 146
 flushfile % 146
} if % 146
} if % 146
/net.anastigmatix.MetaPre/ProcSet findresource % 146
 begin % 146
/net.anastigmatix.StreamIO/ProcSet findresource % 146
 begin % 146
/net.anastigmatix.BinaryIO/ProcSet findresource % 146
 begin % 146
currentpacking //true % 141
setpacking 39 % 136
 dict % 146
 begin % 146
/csdimension{ mark currentcolor % 146
 dup % 146
 type % 146
 dup % 146
/realtype eq % 146
{ pop % 146
}{/integertype ne % 146
{ cleartomark % 146
/.csdim cvx % 146
errordict/undefinedresult get % 146
 exec % 146
} if % 146
} ifelse % 146
 counttomark % 146
 dup % 146
 2 % 136
 add % 146
 1 % 136
 roll % 146
 cleartomark % 146
} bind % 146
 def % 146
/ExecJPEG{ dup % 146
 type % 146
/dicttype ne % 146
{ 7 % 136
 dict % 146
} if % 146
 dup % 146
/Width 4 % 136
 index % 146
 put % 146
 dup % 146
/Height 3 % 136
 index % 146
 put % 146
 dup % 146
/DataSource 2 % 136
 copy % 146
 known % 146
{ pop % 146
 pop % 146
}{ 5 % 136
 index % 146
/DCTDecode filter % 146
 put % 146
} ifelse % 146
 dup % 146
/BitsPerComponent 2 % 136
 copy % 146
 known % 146
{ pop % 146
 pop % 146
}{ 8 % 136
 put % 146
} ifelse % 146
 dup % 146
/ImageMatrix 2 % 136
 copy % 146
 known % 146
{ pop % 146
 pop % 146
}{ 4 % 136
 index % 146
 0 % 136
 0 % 136
 6 % 136
 index % 146
 dup % 146
 neg % 146
 exch % 146
 0 % 136
 exch % 146
 matrix % 146
 astore % 146
 put % 146
} ifelse % 146
 dup % 146
/Decode 2 % 136
 copy % 146
 known % 146
{ pop % 146
 pop % 146
}{//csdimension exec % 146
 dup % 146
 1 % 136
 bitshift % 146
 array % 146
 exch % 146
{ 0 % 136
 exch % 146
 1 % 136
 exch % 146
} repeat % 146
 astore % 146
 put % 146
} ifelse % 146
 dup % 146
/ImageType 2 % 136
 copy % 146
 known % 146
{ pop % 146
 pop % 146
}{ 1 % 136
 put % 146
} ifelse % 146
 exch % 146
 pop % 146
 exch % 146
 pop % 146
 exch % 146
 pop % 146
 image % 146
} bind % 146
 def % 146
/.bvt{ dup % 146
 -5 % 136
 bitshift % 146
 exch % 146
 31 % 136
 and % 146
 1 % 136
 exch % 146
 bitshift % 146
 3 % 136
 1 % 136
 roll % 146
 get % 146
 and % 146
 0 % 136
 ne % 146
} bind % 146
 def % 146
/.JPEGbv [2 0 0 0 0 0 -1 2147483647] % 149
readonly def % 146
/.JPEGstandalone [2 0 0 0 0 0 67043328 0] % 149
readonly def % 146
/.sxe{ errordict/syntaxerror get % 146
 exec % 146
} bind % 146
 def % 146
/.JPEGmark0{ 1 % 136
 index % 146
 (\377) % 142
//flushthru exec % 146
{ 1 % 136
 index % 146
 read % 146
{ dup % 146
 255 % 134
 eq % 146
{ pop % 146
}{ //true % 141
 exit % 146
} ifelse % 146
}{ pop % 146
 pop % 146
 //false % 141
 exit % 146
} ifelse % 146
} loop % 146
{//.JPEGbv 1 % 136
 index % 146
//.bvt exec % 146
{ exch % 146
 pop % 146
//.JPEGstandalone 1 % 136
 index % 146
//.bvt exec % 146
{ exch % 146
 pop % 146
 0 % 136
 exch % 146
}{ exch % 146
//readbe_uint16 exec % 146
 2 % 136
 sub % 146
 exch % 146
} ifelse % 146
 //true % 141
}{ pop % 146
 dup % 146
 exec % 146
} ifelse % 146
}{ //false % 141
} ifelse % 146
} bind % 146
 def % 146
/.JPEGmarker{//.JPEGmark0 dup % 146
 exec % 146
} bind % 146
 def % 146
/.valSOFlen{ dup % 146
 6 % 136
 le % 146
//.sxe if % 146
 6 % 136
 sub % 146
 dup % 146
 3 % 136
 mod % 146
 0 % 136
 ne % 146
//.sxe if % 146
 3 % 136
 idiv % 146
} bind % 146
 def % 146
/.bsq <</BufferSize 128 % 134
>> readonly def % 146
/.tap{ currentglobal % 146
 //true % 141
 setglobal % 146
 1 % 136
 array % 146
 exch % 146
 setglobal % 146
 exch % 146
 1 % 136
 index % 146
//.bsq/StringQueueEncode//extfilter exec % 146
 1 % 136
 index % 146
<</TapTarget 3 % 136
 index % 146
/BufferSize 128 % 134
>>/TapDecode//extfilter exec % 146
} bind % 146
 def % 146
/.reuse{ closefile dup % 146
gcheck{ 1 % 136
 index % 146
 currentglobal % 146
 //true % 141
 setglobal % 146
 2 % 136
 array % 146
 exch % 146
 setglobal % 146
//enq exec % 146
 astore % 146
 pop % 146
//.bsq/SourceQueueDecode}{ exch % 146
//.bsq/SourceQueueDecode//extfilter exec % 146
 exch % 146
 currentglobal % 146
 //false % 141
 setglobal % 146
 2 % 136
 array % 146
 exch % 146
 setglobal % 146
 astore % 146
//.bsq/SourceArrayDecode} ifelse % 146
//extfilter exec % 146
} bind % 146
 def % 146
/.ucjpm{//.JPEGmarker exec % 146
 not % 146
//.sxe if % 146
} bind % 146
 def % 146
/StatJPEG{//.tap exec % 146
 dup % 146
{//.ucjpm exec % 146
 dup % 146
 192 % 134
 eq % 146
 exch % 146
 193 % 134
 eq % 146
 or % 146
{ exit % 146
} if % 146
 1 % 136
 index % 146
 exch % 146
//flushn exec % 146
 dup % 146
} loop % 146
//.valSOFlen exec % 146
 1 % 136
 index % 146
//read_uint8 exec % 146
 2 % 136
 index % 146
 2 % 136
//readnbe_uint16 exec % 146
 aload % 146
 pop % 146
 exch % 146
 5 % 136
 -1 % 136
 roll % 146
//read_uint8 exec % 146
 5 % 136
 -1 % 136
 roll % 146
 1 % 136
 index % 146
 ne % 146
//.sxe if % 146
 7 % 136
 -3 % 136
 roll % 146
//.reuse exec % 146
 5 % 136
 1 % 136
 roll % 146
} bind % 146
 def % 146
/.jfsig (JFIF\000) % 142
readonly def % 146
/StatJFIF{//.tap exec % 146
 dup % 146
//.ucjpm exec % 146
 216 % 134
 ne % 146
//.sxe if % 146
 pop % 146
 dup % 146
//.ucjpm exec % 146
 224 % 134
 ne % 146
//.sxe if % 146
 12 % 136
 lt % 146
//.sxe if % 146
 dup % 146
 5 % 136
 string % 146
//readn exec % 146
//.jfsig ne % 146
//.sxe if % 146
 dup % 146
//readbe_uint16 exec % 146
 1 % 136
 index % 146
//read_uint8 exec % 146
 3 % 136
 -1 % 136
 roll % 146
 2 % 136
//readnbe_uint16 exec % 146
 aload % 146
 pop % 146
 7 % 136
 -3 % 136
 roll % 146
//.reuse exec % 146
//StatJPEG exec % 146
 5 % 136
 -1 % 136
 roll % 146
 9 % 136
 1 % 136
 roll % 146
 8 % 136
 -1 % 136
 roll % 146
} bind % 146
 def % 146
/.cspref{/ColorSpace 2 % 136
 copy % 146
resourcestatus{ pop % 146
 pop % 146
 findresource % 146
{ setcolorspace % 146
} stopped % 146
{ exch % 146
 setcolorspace % 146
} if % 146
 pop % 146
}{ pop % 146
 pop % 146
 setcolorspace % 146
} ifelse % 146
} bind % 146
 def % 146
/hintrenderintent/findcolorrendering where % 146
{ pop % 146
{findcolorrendering pop % 146
/ColorRendering findresource % 146
setcolorrendering}}{{ pop % 146
}} ifelse % 146
 bind % 146
 def % 146
/.JFIFunitless{ 6 % 136
 -2 % 136
 roll % 146
 exch % 146
 2 % 136
{ 4 % 136
 index % 146
 2 % 136
 index % 146
 mul % 146
} repeat % 146
 2 % 136
 copy % 146
 lt % 146
{ exch % 146
} if % 146
 pop % 146
 dup % 146
 4 % 136
 -1 % 136
 roll % 146
 div % 146
 7 % 136
 1 % 136
 roll % 146
 exch % 146
 div % 146
 5 % 136
 1 % 136
 roll % 146
 1 % 136
} bind % 146
 def % 146
/ReadyJFIF{{//.JFIFunitless{ 72 % 136
}{ 72 % 136
 2.54 % 138
 div % 146
}} 8 % 136
 -1 % 136
 roll % 146
 get % 146
 exec % 146
 7 % 136
 -2 % 136
 roll % 146
 2 % 136
 index % 146
 exch % 146
 div % 146
 3 % 136
 1 % 136
 roll % 146
 div % 146
 exch % 146
 8 % 136
 dict % 146
 begin % 146
 1 % 136
 2 % 136
 index % 146
 div % 146
 0 % 136
 0 % 136
 -1 % 136
 4 % 136
 index % 146
 div % 146
 0 % 136
 8 % 136
 index % 146
 matrix % 146
 astore % 146
/ImageMatrix exch % 146
 def % 146
 6 % 136
 -1 % 136
 roll % 146
/BitsPerComponent exch % 146
 def % 146
 3 % 136
 -1 % 136
 roll % 146
 dup % 146
 1 % 136
 eq % 146
{/DeviceGray/DefaultGray//.cspref exec % 146
}{ dup % 146
 3 % 136
 eq % 146
{/DeviceRGB/DefaultRGB//.cspref exec % 146
} if % 146
} ifelse % 146
/Perceptual//hintrenderintent exec % 146
 dup % 146
 1 % 136
 bitshift % 146
 array % 146
 exch % 146
{ 0 % 136
 exch % 146
 1 % 136
 exch % 146
} repeat % 146
 astore % 146
/Decode exch % 146
 def % 146
 currentdict % 146
 end % 146
 3 % 136
 1 % 136
 roll % 146
 exch % 146
 4 % 136
 index % 146
 mul % 146
 exch % 146
 3 % 136
 index % 146
 mul % 146
} bind % 146
 def % 146
/.endEPSFflag //false % 141
 1 % 136
 array % 146
 astore % 146
 def % 146
/.endEPSF{{ clear % 146
} 1 % 136
//hide+ap exec % 146
 aload % 146
 pop % 146
cleardictstack{ begin % 146
} forall % 146
} bind % 146
 def % 146
/.EndEPSF{//.endEPSFflag 0 % 136
 //true % 141
 put % 146
 stop % 146
} bind % 146
executeonly def % 146
/ExecEPSF{ save % 146
countdictstack dup % 146
 array % 146
dictstack exch % 146
 3 % 136
 sub % 146
 3 % 136
 exch % 146
 getinterval % 146
cleardictstack 5 % 136
 2 % 136
 roll % 146
 /showpage % 145
{} def % 146
 0 % 136
 setgray % 146
 0 % 136
 setlinecap % 146
 1 % 136
 setlinewidth % 146
 0 % 136
 setlinejoin % 146
 10 % 136
setmiterlimit [ ] 0 % 136
 setdash % 146
 newpath % 146
 //false % 141
setstrokeadjust //false % 141
setoverprint count % 146
{ concat % 146
 exec % 146
 cvx % 146
 exec % 146
} exch % 146
 3 % 136
{ exch % 146
{//.endEPSFflag 0 % 136
 2 % 136
 copy % 146
 get % 146
{ //false % 141
 put % 146
}{ pop % 146
 pop % 146
//.endEPSF exec % 146
 pop % 146
 stop % 146
} ifelse % 146
} if % 146
//.endEPSF exec % 146
 restore % 146
}//hvhide+k exec % 146
} bind % 146
 def % 146
/BeginEPSF{ currentfile % 146
{/EndEPSF//.EndEPSF def % 146
} matrix % 146
//ExecEPSF exec % 146
} bind % 146
 def % 146
/ReadyEPSF{ 9 % 136
 -4 % 136
 roll % 146
 4 % 136
 copy % 146
 pop % 146
 pop % 146
 neg % 146
 exch % 146
 neg % 146
 exch % 146
 2 % 136
 copy % 146
 matrix % 146
 translate % 146
 12 % 136
 1 % 136
 roll % 146
 3 % 136
 -1 % 136
 roll % 146
 add % 146
 3 % 136
 1 % 136
 roll % 146
 add % 146
 exch % 146
{ rectclip % 146
} aload % 146
 pop % 146
 5 % 136
 array % 146
 astore % 146
 cvx % 146
 7 % 136
 1 % 136
 roll % 146
 matrix % 146
 scale % 146
 4 % 136
 1 % 136
 roll % 146
 matrix % 146
 rotate % 146
 3 % 136
 1 % 136
 roll % 146
 matrix % 146
 translate % 146
 3 % 136
{ dup % 146
 concatmatrix % 146
} repeat % 146
} bind % 146
 def % 146
/FitEPSF//ReadyEPSF dup % 146
 length % 146
 3 % 136
 sub % 146
 3 % 136
 exch % 146
 getinterval % 146
 def % 146
/.bbx (%%BoundingBox:) % 142
readonly def % 146
/.hbx (%%HiResBoundingBox:) % 142
readonly def % 146
/.kws [//.bbx//.hbx ] readonly def % 146
/.kwb//.kws 0 % 136
 1 % 136
 getinterval % 146
 def % 146
/.kwh//.kws 1 % 136
 1 % 136
 getinterval % 146
 def % 146
/.tns{ token % 146
 not % 146
//.sxe if % 146
 exch % 146
} bind % 146
 def % 146
/.ate (atend) % 142
readonly def % 146
/.bbp{//.tns exec % 146
 1 % 136
 index % 146
//.ate eq % 146
{ pop % 146
}{ 3 % 136
//.tns repeat % 146
 pop % 146
 3 % 136
 -1 % 136
 0 % 136
{ index % 146
 type % 146
 dup % 146
/integertype ne % 146
 exch % 146
/realtype ne % 146
 and % 146
//.sxe if % 146
} for % 146
} ifelse % 146
} bind % 146
 def % 146
/.se0{ pop % 146
//.kwh 2 % 136
 index % 146
 1 % 136
 get % 146
} bind % 146
 def % 146
/.se1{ index % 146
 exch % 146
/DSCDecode//extfilter exec % 146
 flushfile % 146
} bind % 146
 def % 146
/.se2{ 2 % 136
 index % 146
 2 % 136
 get % 146
 dup % 146
 length % 146
 1 % 136
 sub % 146
 get % 146
 13 % 136
 ne % 146
} bind % 146
 def % 146
/StatEPSF{ <</Unwrap //true % 141
>>/DSCDecode//extfilter exec % 146
//.tap exec % 146
 4 % 136
 array % 146
 exch % 146
<</Status 3 % 136
 index % 146
/NestDepth 1 % 136
/HeaderOnly //true % 141
/Keywords//.kws >> 1 % 136
//.se1 exec % 146
 1 % 136
 index % 146
 0 % 136
 get % 146
 dup % 146
//.hbx eq % 146
//.se0{//.bbx ne % 146
//.sxe{ 1 % 136
 index % 146
 1 % 136
 get % 146
//.se2 exec % 146
<</CountLF 3 % 136
 -1 % 136
 roll % 146
/Status 6 % 136
 index % 146
/NestDepth 1 % 136
/HeaderOnly //true % 141
/Keywords//.kwh >> 2 % 136
//.se1 exec % 146
 2 % 136
 index % 146
 0 % 136
 get % 146
//.hbx eq % 146
//.se0{//.kwb exch % 146
} ifelse % 146
} ifelse % 146
} ifelse % 146
//.bbp exec % 146
 dup % 146
//.ate eq % 146
{ pop % 146
//.se2 exec % 146
<</CountLF 3 % 136
 -1 % 136
 roll % 146
/Keywords 4 % 136
 index % 146
/Status 8 % 136
 index % 146
/NestDepth 1 % 136
>> 2 % 136
//.se1 exec % 146
 0 % 136
 get % 146
 2 % 136
 index % 146
 0 % 136
 get % 146
 ne % 146
//.sxe if % 146
 1 % 136
 index % 146
 1 % 136
 get % 146
//.bbp exec % 146
 dup % 146
//.ate eq % 146
//.sxe if % 146
}{ 5 % 136
 -1 % 136
 roll % 146
 pop % 146
} ifelse % 146
 9 % 136
 4 % 136
 roll % 146
 pop % 146
 pop % 146
//.reuse exec % 146
 5 % 136
 1 % 136
 roll % 146
} bind % 146
 def % 146
{/csdimension/hintrenderintent/StatJPEG/StatJFIF/ReadyJFIF/ExecJPEG/FitEPSF/BeginEPSF/ExecEPSF/StatEPSF/ReadyEPSF} export/net.anastigmatix.Import exch % 146
/ProcSet defineresource pop % 146
setpacking end % 146
 end % 146
 end % 146
