/net.anastigmatix.filter/Category resourcestatus{ pop % 146
 2 % 136
 lt % 146
{ currentfile % 146
 flushfile % 146
} if % 146
} if % 146
/net.anastigmatix.MetaPre/ProcSet findresource % 146
 begin % 146
 27 % 136
 dict % 146
 begin % 146
 currentpacking //true % 141
 setpacking currentglobal % 146
 //true % 141
 setglobal % 146
/.lread{ dup % 146
 1 % 136
 get % 146
 dup % 146
 0 % 136
 get % 146
 exec % 146
} bind % 146
 def % 146
/.nullwhatnext{ pop % 146
 pop % 146
 pop % 146
 pop % 146
 1 % 136
 index % 146
 0 % 136
{ pop % 146
 pop % 146
 () % 142
} put % 146
 2 % 136
 index % 146
 dup % 146
 2 % 136
 null % 146
 put % 146
 4 % 136
 null % 146
 put % 146
} bind % 146
 def % 146
/.nullgetnext//.nullwhatnext dup % 146
 length % 146
 4 % 136
 sub % 146
 4 % 136
 exch % 146
 getinterval % 146
 def % 146
/.epep{ exch % 146
 pop % 146
 exch % 146
 pop % 146
} bind % 146
 def % 146
/.isge{ 1 % 136
 index % 146
 2 % 136
 get % 146
 exec % 146
} bind % 146
 def % 146
/.wnt <</stringtype{{ 1 % 136
 index % 146
 2 % 136
 get % 146
//.isge exec % 146
 1 % 136
 index % 146
 1 % 136
 get % 146
 exec % 146
 dup % 146
 () % 142
 ne % 146
//.epep{ pop % 146
 dup % 146
 0 % 136
 get % 146
 exec % 146
} ifelse % 146
}} bind % 146
/arraytype{{ 1 % 136
 index % 146
 2 % 136
 get % 146
//.isge exec % 146
 exec % 146
 dup % 146
 () % 142
 ne % 146
//.epep{ 1 % 136
 index % 146
 1 % 136
 get % 146
 exec % 146
 pop % 146
 dup % 146
 0 % 136
 get % 146
 exec % 146
} ifelse % 146
}} bind % 146
/filetype{{ 1 % 136
 index % 146
 2 % 136
 get % 146
//.isge exec % 146
 2 % 136
 index % 146
 4 % 136
 get % 146
 dup % 146
 null % 146
 eq % 146
{ pop % 146
 currentglobal % 146
 3 % 136
 index % 146
 dup % 146
 gcheck setglobal % 146
 3 % 136
 get % 146
 string % 146
 exch % 146
 setglobal % 146
 3 % 136
 index % 146
 4 % 136
 2 % 136
 index % 146
 put % 146
} if % 146
 readstring % 146
//.epep{ 1 % 136
 index % 146
 1 % 136
 get % 146
 exec % 146
 dup % 146
 () % 142
 ne % 146
//.epep{ pop % 146
 dup % 146
 0 % 136
 get % 146
 exec % 146
} ifelse % 146
} ifelse % 146
}} bind % 146
 >> readonly def % 146
/.whatnext{ 5 % 136
 index % 146
 0 % 136
//.wnt 3 % 136
 index % 146
 type % 146
 get % 146
 exec % 146
 put % 146
 pop % 146
 put % 146
} bind % 146
 def % 146
/.decodehelper{ 1 % 136
 index % 146
 gcheck setglobal % 146
//.lread null % 146
 dup % 146
 4 % 136
 -1 % 136
 roll % 146
/BufferSize get % 146
 null % 146
 5 % 136
 array % 146
 astore % 146
 dup % 146
 1 % 136
 //true % 141
 setglobal % 146
 null % 146
//.nullgetnext{} 3 % 136
 array % 146
 astore % 146
 put % 146
 dup % 146
 1 % 136
 get % 146
 () % 142
 2 % 136
 index % 146
 2 % 136
 6 % 136
 -1 % 136
 roll % 146
 dup % 146
//.whatnext exec % 146
 pop % 146
 pop % 146
 dup % 146
 gcheck setglobal % 146
} bind % 146
 def % 146
/Generic/Category findresource % 146
 dup % 146
 length % 146
 1 % 136
 add % 146
 dict % 146
 copy % 146
 dup % 146
/.decodehelper dup % 146
 load % 146
 put % 146
/net.anastigmatix.filter exch % 146
/Category defineresource pop % 146
/.agetnext{ 2 % 136
 index % 146
 2 % 136
 2 % 136
 copy % 146
 get % 146
 dup % 146
 0 % 136
 null % 146
 put % 146
 dup % 146
 length % 146
 1 % 136
 sub % 146
 1 % 136
 exch % 146
 getinterval % 146
 dup % 146
 dup % 146
 length % 146
 0 % 136
 gt % 146
{ 0 % 136
 get % 146
//.whatnext exec % 146
}//.nullwhatnext ifelse % 146
} bind % 146
 def % 146
/.lagetnext{ 1 % 136
 index % 146
 3 % 136
 2 % 136
 copy % 146
 get % 146
 5 % 136
 index % 146
 2 % 136
 get % 146
 1 % 136
 index % 146
 null % 146
 put % 146
 1 % 136
 add % 146
 5 % 136
 index % 146
 2 % 136
 get % 146
 dup % 146
 length % 146
 2 % 136
 index % 146
 gt % 146
{ 1 % 136
 index % 146
 get % 146
//.whatnext exec % 146
}//.nullwhatnext ifelse % 146
} bind % 146
 def % 146
/.qgetnext{ 2 % 136
 index % 146
 2 % 136
 1 % 136
 index % 146
 5 % 136
 get % 146
//deq exec % 146
{ 0 % 136
 get % 146
 dup % 146
//.whatnext exec % 146
}{ () % 142
 dup % 146
//.nullwhatnext exec % 146
} ifelse % 146
} bind % 146
 def % 146
/.sq0{ currentglobal % 146
 not % 146
 setglobal % 146
 string % 146
 copy % 146
 exch % 146
 1 % 136
 get % 146
 2 % 136
 array % 146
 currentglobal % 146
 not % 146
 setglobal % 146
} bind % 146
 def % 146
/.sq1//.sq0 3 % 136
 7 % 136
 getinterval % 146
 def % 146
/.sqe{ exch % 146
 1 % 136
 index % 146
 dup % 146
 length % 146
 2 % 136
 index % 146
 3 % 136
 get % 146
 0 % 136
 2 % 136
 copy % 146
 get % 146
 3 % 136
 index % 146
 add % 146
 put % 146
 2 % 136
 index % 146
 1 % 136
 get % 146
 gcheck currentglobal % 146
 xor % 146
//.sq0//.sq1 ifelse % 146
//enq exec % 146
 astore % 146
 pop % 146
} bind % 146
 def % 146
/.nocnt [ 0 % 136
 ] def % 146
/.te{ exch % 146
 1 % 136
 get % 146
{ 1 % 136
 index % 146
 writestring % 146
} forall % 146
} bind % 146
 def % 146
/.drf{ 0 % 136
 get % 146
} bind % 146
 def % 146
/.lrf{ 1 % 136
 index % 146
 3 % 136
 get % 146
 get % 146
} bind % 146
 def % 146
/.mts () % 142
 def % 146
/.tdr{ dup % 146
 1 % 136
 get % 146
 dup % 146
 0 % 136
 get % 146
 exec % 146
 dup % 146
 () % 142
 ne % 146
{ exch % 146
 2 % 136
 get % 146
 1 % 136
 index % 146
 writestring % 146
}{ exch % 146
 dup % 146
 3 % 136
 get % 146
{ 2 % 136
 get % 146
 closefile}{ pop % 146
} ifelse % 146
} ifelse % 146
} bind % 146
 def % 146
/.sqw{{ dup % 146
 () % 142
 eq % 146
{ pop % 146
 2 % 136
 get % 146
 string % 146
}//.sqe ifelse % 146
}//.sqe ifelse % 146
} bind % 146
 def % 146
/.tew{{ dup % 146
 () % 142
 eq % 146
{ pop % 146
 2 % 136
 get % 146
 string % 146
}//.te ifelse % 146
}{ 1 % 136
 index % 146
 3 % 136
 get % 146
{ 1 % 136
 index % 146
 3 % 136
 1 % 136
 roll % 146
//.te exec % 146
 exch % 146
 1 % 136
 get % 146
{ closefile} forall % 146
}//.te ifelse % 146
} ifelse % 146
} bind % 146
 def % 146
 setglobal % 146
/SourceArrayDecode{ 1 % 136
 index % 146
 gcheck setglobal % 146
//.lread null % 146
 dup % 146
 4 % 136
 -1 % 136
 roll % 146
/BufferSize get % 146
 null % 146
 5 % 136
 array % 146
 astore % 146
 dup % 146
 1 % 136
 null % 146
 currentglobal % 146
 //true % 141
 setglobal % 146
{//.agetnext//.drf 3 % 136
}{//.lagetnext//.lrf 0 % 136
 4 % 136
} ifelse % 146
 array % 146
 astore % 146
 put % 146
 dup % 146
 1 % 136
 get % 146
 () % 142
 2 % 136
 index % 146
 2 % 136
 6 % 136
 -1 % 136
 roll % 146
 dup % 146
 0 % 136
 get % 146
//.whatnext exec % 146
 pop % 146
 pop % 146
/Decode} bind % 146
 def % 146
/SourceQueueDecode{ 1 % 136
 index % 146
 gcheck setglobal % 146
//.lread null % 146
 dup % 146
 4 % 136
 -1 % 136
 roll % 146
/BufferSize get % 146
 null % 146
 6 % 136
 -1 % 136
 roll % 146
 6 % 136
 array % 146
 astore % 146
 dup % 146
 1 % 136
 //true % 141
 setglobal % 146
 null % 146
//.qgetnext null % 146
 cvx % 146
 3 % 136
 array % 146
 astore % 146
 put % 146
 dup % 146
 1 % 136
 get % 146
//.mts 2 % 136
 index % 146
 2 % 136
//.mts dup % 146
//.whatnext exec % 146
 pop % 146
 pop % 146
/Decode} bind % 146
 def % 146
/TapDecode{ exch % 146
//.tdr exch % 146
 2 % 136
 index % 146
//.decodehelper exec % 146
 3 % 136
 -1 % 136
 roll % 146
 dup % 146
/TapTarget get % 146
 dup % 146
 gcheck currentglobal % 146
 and % 146
 setglobal % 146
 exch % 146
/CloseTarget 2 % 136
 copy % 146
 known % 146
{ get % 146
}{ pop % 146
 pop % 146
 //false % 141
} ifelse % 146
 4 % 136
 array % 146
 astore % 146
/Decode} bind % 146
 def % 146
/StringQueueEncode{//.sqw 3 % 136
 1 % 136
 roll % 146
 dup % 146
/BufferSize get % 146
 exch % 146
/Count 2 % 136
 copy % 146
 known % 146
{ get % 146
}{ pop % 146
 pop % 146
//.nocnt} ifelse % 146
 2 % 136
 index % 146
 gcheck 1 % 136
 index % 146
 gcheck and % 146
 setglobal % 146
 4 % 136
 array % 146
 astore % 146
/Encode} bind % 146
 def % 146
/TeeEncode{//.tew 3 % 136
 1 % 136
 roll % 146
 dup % 146
/BufferSize get % 146
 exch % 146
/CloseTarget 2 % 136
 copy % 146
 known % 146
{ get % 146
}{ pop % 146
 pop % 146
 //false % 141
} ifelse % 146
 2 % 136
 index % 146
 gcheck setglobal % 146
 4 % 136
 array % 146
 astore % 146
/Encode} bind % 146
 def % 146
 setpacking{/SourceArrayDecode/SourceQueueDecode/TapDecode/StringQueueEncode/TeeEncode}{ dup % 146
 load % 146
/net.anastigmatix.filter defineresource pop % 146
} forall % 146
 end % 146
 end % 146
