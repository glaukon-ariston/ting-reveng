/WSMarkEncode/net.anastigmatix.filter resourcestatus{ pop % 146
 2 % 136
 lt % 146
{ currentfile % 146
 flushfile % 146
} if % 146
} if % 146
/net.anastigmatix.StreamIO/ProcSet findresource % 146
 begin % 146
 11 % 136
 dict % 146
 begin % 146
currentpacking //true % 141
setpacking currentglobal % 146
 //true % 141
 setglobal % 146
/.bang (!) % 142
readonly def % 146
/.pct (%) % 142
readonly def % 146
/.til (~) % 142
readonly def % 146
/.dd [0 1] % 149
readonly def % 146
/.bit{ 3 % 136
 -1 % 136
 roll % 146
 get % 146
 1 % 136
 index % 146
 8 % 136
 idiv % 146
 get % 146
 exch % 146
 8 % 136
 mod % 146
 7 % 136
 sub % 146
 bitshift % 146
 1 % 136
 and % 146
} bind % 146
 def % 146
/.ppf{ pop % 146
 pop % 146
 //false % 141
} bind % 146
 def % 146
/.pxl{ 2 % 136
 copy % 146
 5 % 136
 index % 146
 8 % 136
 get % 146
 dup % 146
 0 % 136
 eq % 146
{ pop % 146
}{ mod % 146
} ifelse % 146
 exch % 146
 5 % 136
 index % 146
 9 % 136
 get % 146
 dup % 146
 0 % 136
 eq % 146
{ pop % 146
}{ mod % 146
} ifelse % 146
 5 % 136
 index % 146
 7 % 136
 get % 146
 transform % 146
 round % 146
 cvi % 146
 exch % 146
 round % 146
 cvi % 146
 2 % 136
 copy % 146
 0 % 136
 lt % 146
 exch % 146
 0 % 136
 lt % 146
 or % 146
//.ppf{ 5 % 136
 index % 146
 4 % 136
 get % 146
 2 % 136
 index % 146
 le % 146
//.ppf{ 5 % 136
 index % 146
 3 % 136
 get % 146
 1 % 136
 index % 146
 le % 146
//.ppf{ 5 % 136
 index % 146
 12 % 136
 get % 146
//.bit exec % 146
 4 % 136
 index % 146
 10 % 136
 get % 146
 exch % 146
 get % 146
 0.5 % 138
 ge % 146
} ifelse % 146
} ifelse % 146
} ifelse % 146
} bind % 146
 def % 146
/.lwrite{ exch % 146
 dup % 146
//.bang lt % 146
{ pop % 146
}{ 2 % 136
 index % 146
 2 % 136
 get % 146
 1 % 136
 index % 146
 dup % 146
//.pct eq % 146
{ 4 % 136
 index % 146
 1 % 136
 get % 146
 dup % 146
 1 % 136
 get % 146
 0 % 136
 ne % 146
{ pop % 146
}{ 1 % 136
 1 % 136
 put % 146
 1 % 136
 index % 146
 32 % 136
 write % 146
} ifelse % 146
} if % 146
 writestring % 146
//.til ne % 146
{ 1 % 136
 index % 146
 1 % 136
 get % 146
 aload % 146
 pop % 146
{ 1 % 136
 add % 146
 dup % 146
 4 % 136
 index % 146
 5 % 136
 get % 146
 ge % 146
{ pop % 146
 1 % 136
 add % 146
 0 % 136
 3 % 136
 index % 146
 2 % 136
 get % 146
 10 % 136
 write % 146
} if % 146
//.pxl exec % 146
{ 3 % 136
 index % 146
 2 % 136
 get % 146
 32 % 136
 write % 146
}{ exit % 146
} ifelse % 146
} loop % 146
 3 % 136
 index % 146
 1 % 136
 get % 146
 astore % 146
 pop % 146
} if % 146
} ifelse % 146
 not % 146
{ dup % 146
 6 % 136
 get % 146
{ dup % 146
 2 % 136
 get % 146
closefile} if % 146
} if % 146
 11 % 136
 get % 146
} bind % 146
 def % 146
 setglobal % 146
/.imrd{ begin % 146
DataSource dup % 146
 type % 146
/filetype ne % 146
{ dup % 146
 type % 146
/stringtype eq % 146
{ currentglobal % 146
 exch % 146
 dup % 146
gcheck setglobal % 146
 1 % 136
 array % 146
 astore % 146
 cvx % 146
 exch % 146
 setglobal % 146
} if % 146
 0 % 136
 () % 142
/SubFileDecode filter % 146
} if % 146
Width 7 % 136
 add % 146
 8 % 136
 idiv % 146
Height array % 146
 dup % 146
 0 % 136
 1 % 136
Height 1 % 136
 sub % 146
 end % 146
{ 3 % 136
 index % 146
 string % 146
 5 % 136
 index % 146
 1 % 136
 index % 146
 readstring % 146
 pop % 146
 pop % 146
 put % 146
 dup % 146
} for % 146
 pop % 146
 exch % 146
 pop % 146
 exch % 146
closefile} bind % 146
 def % 146
/.dg{ exch % 146
 currentdict % 146
 exch % 146
 2 % 136
 copy % 146
 known % 146
{ get % 146
 exch % 146
 pop % 146
}{ pop % 146
 pop % 146
 exec % 146
} ifelse % 146
} bind % 146
 def % 146
/.gar{ 1 % 136
 index % 146
gcheck not % 146
 currentglobal % 146
 and % 146
{ 0 % 136
 exch % 146
 getinterval % 146
 aload % 146
 length % 146
 array % 146
 astore % 146
}{ pop % 146
} ifelse % 146
} bind % 146
 def % 146
/WSMarkEncode{ begin % 146
//.lwrite exch % 146
 //true % 141
 setglobal % 146
[ 0 % 136
 0 % 136
] exch % 146
 dup % 146
gcheck setglobal % 146
 currentdict % 146
/Width get % 146
 currentdict % 146
/Height get % 146
/LineLength 74 % 136
//.dg exec % 146
/CloseTarget //false % 141
//.dg exec % 146
/ImageMatrix{ matrix % 146
}//.dg exec % 146
 6 % 136
//.gar exec % 146
/XStep 0 % 136
//.dg exec % 146
/YStep 0 % 136
//.dg exec % 146
/Decode//.dd//.dg exec % 146
 2 % 136
//.gar exec % 146
 1 % 136
 string % 146
 currentdict % 146
 end % 146
//.imrd exec % 146
 13 % 136
 array % 146
 astore % 146
/Encode} bind % 146
 end % 146
 end % 146
/net.anastigmatix.filter defineresource pop % 146
setpacking